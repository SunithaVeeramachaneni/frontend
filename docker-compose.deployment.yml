# 1. Update `BACKEND_HOME` environment variable(backend source code home path) in .docker/env/[development|testing|staging|production].env file from CWP HOME

# In Windows
# 2. Run `docker compose --env-file .\.docker\env\[development|testing|staging|production].env build`
# 3. Run `docker compose --env-file .\.docker\env\[development|testing|staging|production].env up`

# In Linux
# 2. Run `docker compose --env-file .docker/env/[development|testing|staging|production].env build`
# 3. Run `docker compose --env-file .docker/env/[development|testing|staging|production].env up`

################ OR ################

# 1. Set BACKEND_HOME, NPM_AUTH_TOKEN, APP_ENV & DEPLOYMENT_ENV environment variable by running the following command in your commnand window (see the notes below if on Windows).

#    export BACKEND_HOME='backend home path comes here...'
#    export NPM_AUTH_TOKEN='npm authentication token comes here...'
#    export APP_ENV=development or export APP_ENV=production
#    export DEPLOYMENT_ENV=development or DEPLOYMENT_ENV=testing or DEPLOYMENT_ENV=staging or DEPLOYMENT_ENV=production

#    NOTE: If you're on Windows use one of the following commands to create the environment variables.

#    For the standard Windows DOS command shell use `set` instead of `export` for environment variables.
#    For Windows Powershell use `$env:APP_ENV = "value"`.

#    $env:BACKEND_HOME="backend home path comes here..."
#    $env:NPM_AUTH_TOKEN="npm authentication token comes here..."
#    $env:APP_ENV="development" or $env:APP_ENV="production"
#    $env:DEPLOYMENT_ENV="development"

# 2. Run docker compose -f docker-compose.deployment.yml build
# 3. Run docker compose -f docker-compose.deployment.yml up -d

version: '3.8'
services:
  nginx:
    container_name: nginx-${DEPLOYMENT_ENV}
    image: nginx-${DEPLOYMENT_ENV}
    build:
      context: .
      dockerfile: .docker/nginx.${DEPLOYMENT_ENV}.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - wi
      - wi-abap
      - mcc-spcc-abap
      - dashboard
      - data-collector
    networks:
      - app-network

  wi:
    container_name: wi-${DEPLOYMENT_ENV}
    image: wi-${DEPLOYMENT_ENV}
    build:
      context: ${BACKEND_HOME}/WorkInstructions
      dockerfile: .docker/wi.deployment.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    environment:
      - GOOGLE_APPLICATION_CREDENTIALS=/usr/src/wi/.docker/google-cloud-authentication/CWP-S2T_5d8404bd7ee9e7145a60f2778956aef6b96b822f.json
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
    ports:
      - '8001:8001'
    networks:
      - app-network

  wi-abap:
    container_name: wi-abap-${DEPLOYMENT_ENV}
    image: wi-abap-${DEPLOYMENT_ENV}
    build:
      context: ${BACKEND_HOME}/WorkInstructions
      dockerfile: .docker/wi-abap.deployment.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    environment:
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
    ports:
      - '8002:8002'
    networks:
      - app-network

  mcc-spcc-abap:
    container_name: mcc-spcc-abap-${DEPLOYMENT_ENV}
    image: mcc-spcc-abap-${DEPLOYMENT_ENV}
    build:
      context: ${BACKEND_HOME}/MCC_SCC
      dockerfile: .docker/mcc-spcc-abap.deployment.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    environment:
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
    ports:
      - '8003:8003'
    networks:
      - app-network

  dashboard:
    container_name: dashboard-${DEPLOYMENT_ENV}
    image: dashboard-${DEPLOYMENT_ENV}
    build:
      context: ${BACKEND_HOME}/Reports
      dockerfile: .docker/dashboard.deployment.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    environment:
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
    ports:
      - '8004:8004'
    networks:
      - app-network

  data-collector:
    container_name: data-collector-${DEPLOYMENT_ENV}
    image: data-collector-${DEPLOYMENT_ENV}
    build:
      context: ${BACKEND_HOME}/DataCollectorService
      dockerfile: .docker/data-collector.deployment.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    restart: always
    environment:
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
    ports:
      - '8005:8005'
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
