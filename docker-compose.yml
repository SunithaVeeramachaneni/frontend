# 1. Update `BACKEND_HOME` environment variable(backend source code home path) in .docker/env/local.env file from CWP HOME

# In Windows
# 2. Run `docker compose --env-file .\.docker\env\local.env build`
# 3. Run `docker compose --env-file .\.docker\env\local.env up`

# In Linux
# 2. Run `docker compose --env-file .docker/env/local.env build`
# 3. Run `docker compose --env-file .docker/env/local.env up`

################ OR ################

# 1. Set BACKEND_HOME, NPM_AUTH_TOKEN, APP_ENV & DEPLOYMENT_ENV environment variable by running the following command in your commnand window (see the notes below if on Windows).

#    export BACKEND_HOME='backend home path comes here...'
#    export NPM_AUTH_TOKEN='npm authentication token comes here...'
#    export APP_ENV=development
#    export DEPLOYMENT_ENV=development

#    NOTE: If you're on Windows use one of the following commands to create the environment variables.

#    For the standard Windows DOS command shell use `set` instead of `export` for environment variables.
#    For Windows Powershell use `$env:APP_ENV = "value"`.

#    $env:BACKEND_HOME="backend home path comes here..."
#    $env:NPM_AUTH_TOKEN="npm authentication token comes here..."
#    $env:APP_ENV="development"
#    $env:DEPLOYMENT_ENV="development"

# 2. Run docker compose build
# 3. Run docker compose up

version: '3.8'
services:
  nginx:
    container_name: nginx-local
    image: nginx:alpine
    build:
      context: .
      dockerfile: .docker/nginx.dockerfile
    volumes:
      - ./dist/cwp:/usr/share/nginx/html
    ports:
      - '80:80'
      - '443:443'
    depends_on:
      - wi
      - wi-abap
      - mcc-spcc-abap
      - dashboard
      - data-collector
    networks:
      - app-network

  wi:
    container_name: wi-local
    image: wi-local
    build:
      context: ${BACKEND_HOME}/WorkInstructions
      dockerfile: .docker/wi.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    volumes:
      - ${BACKEND_HOME}/WorkInstructions:/usr/src/wi
      - /usr/src/wi/node_modules
    environment:
      - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
      - GOOGLE_APPLICATION_CREDENTIALS=/usr/src/wi/.docker/google-cloud-authentication/CWP-S2T_5d8404bd7ee9e7145a60f2778956aef6b96b822f.json
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      - NODE_HEAPDUMP_OPTIONS=nosignal
      - MONGODB_HOST_NAME=mongo-local
      - MYSQL_HOST_NAME=mysql-local
      - REDIS_HOST_NAME=redis-local
    ports:
      - '8001:8001'
    depends_on:
      - mongo
      - mysql
      - redis
    networks:
      - app-network

  wi-abap:
    container_name: wi-abap-local
    image: wi-abap-local
    build:
      context: ${BACKEND_HOME}/WorkInstructions
      dockerfile: .docker/wi-abap.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    volumes:
      - ${BACKEND_HOME}/WorkInstructions:/usr/src/wi-abap
      - /usr/src/wi-abap/node_modules
    environment:
      - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      - NODE_HEAPDUMP_OPTIONS=nosignal
    ports:
      - '8002:8002'
    networks:
      - app-network

  mcc-spcc-abap:
    container_name: mcc-spcc-abap-local
    image: mcc-spcc-abap-local
    build:
      context: ${BACKEND_HOME}/MCC_SCC
      dockerfile: .docker/mcc-spcc-abap.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    volumes:
      - ${BACKEND_HOME}/MCC_SCC:/usr/src/mcc-spcc-abap
      - /usr/src/mcc-spcc-abap/node_modules
    environment:
      - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      - NODE_HEAPDUMP_OPTIONS=nosignal
      - MONGODB_HOST_NAME=mongo-local
      - REDIS_HOST_NAME=redis-local
    ports:
      - '8003:8003'
    depends_on:
      - redis
      - mongo
    networks:
      - app-network

  dashboard:
    container_name: dashboard-local
    image: dashboard-local
    build:
      context: ${BACKEND_HOME}/Reports
      dockerfile: .docker/dashboard.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    volumes:
      - ${BACKEND_HOME}/Reports:/usr/src/dashboard
      - /usr/src/dashboard/node_modules
    environment:
      - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      - NODE_HEAPDUMP_OPTIONS=nosignal
      - MONGODB_HOST_NAME=mongo-local
      - MYSQL_HOST_NAME=mysql-local
      - REDIS_HOST_NAME=redis-local
    ports:
      - '8004:8004'
    depends_on:
      - mongo
      - mysql
      - redis
    networks:
      - app-network

  data-collector:
    container_name: data-collector-local
    image: data-collector-local
    build:
      context: ${BACKEND_HOME}/DataCollectorService
      dockerfile: .docker/data-collector.dockerfile
      args:
        - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
    volumes:
      - ${BACKEND_HOME}/DataCollectorService:/usr/src/data-collector
      - /usr/src/data-collector/node_modules
    command: sh -c "cd /usr/src/data-collector && npm i && nodemon src/server.js"
    environment:
      - NPM_AUTH_TOKEN=${NPM_AUTH_TOKEN}
      - NODE_ENV=${APP_ENV}
      - DEPLOYMENT_ENV=${DEPLOYMENT_ENV}
      - MONGODB_HOST_NAME=mongo-local
    ports:
      - '8005:8005'
    depends_on:
      - mongo
    networks:
      - app-network

  mongo:
    container_name: mongo-local
    image: mongo:latest
    #environment:
    #  MONGO_INITDB_ROOT_USERNAME: root
    #  MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongodata:/data/db
      - ./.docker/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    ports:
      - '27017:27017'
    networks:
      - app-network

  redis:
    container_name: redis-local
    image: redis
    ports:
      - '6379:6379'
    networks:
      - app-network

  mysql:
    container_name: mysql-local
    image: mysql:5.7
    environment:
      MYSQL_DATABASE: cwp_tenants
      MYSQL_USER: admin
      MYSQL_PASSWORD: Innovation54321
      MYSQL_ROOT_PASSWORD: password
    volumes:
      - mysqldata:/var/lib/mysql
      - ./.docker/mysql/1-schema.sql:/docker-entrypoint-initdb.d/1-schema.sql:ro
      - ./.docker/mysql/2-data.sql:/docker-entrypoint-initdb.d/2-data.sql:ro
    ports:
      - '3306:3306'
    networks:
      - app-network

volumes:
  mongodata:
  mysqldata:

networks:
  app-network:
    driver: bridge
